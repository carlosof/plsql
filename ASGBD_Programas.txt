

   SET SERVEROUTPUT ON       //Al iniciar//

   --- Salario de un empleado ---

DECLARE
    COD_EMP EMPLE.EMP_NO%TYPE;
    SAL_MEDIO NUMBER(6,2) DEFAULT 0;
    COD_DEPT EMPLE.DEPT_NO%TYPE;
    SAL_EMPLE EMPLE.SALARIO%TYPE;
BEGIN
    COD_EMP:=&CODIGOEMPLEADO;
    SELECT DEPT_NO,SALARIO INTO COD_DEPT,SAL_EMPLE FROM EMPLE WHERE EMP_NO=COD_EMP;
    SELECT AVG(SALARIO) INTO SAL_MEDIO FROM EMPLE WHERE DEPT_NO=COD_DEPT;
    IF SAL_EMPLE>SAL_MEDIO THEN
     DBMS_OUTPUT.PUT_LINE('EL EMPLEADO GANA MAS QUE LA MEDIA DE SUS COMPAÑEROS');
     ELSIF SAL_EMPLE<SAL_MEDIO THEN
     DBMS_OUTPUT.PUT_LINE('EL EMPLEADO GANA MENOS QUE LA MEDIA DE SUS COMPAÑEROS');
     ELSE
     DBMS_OUTPUT.PUT_LINE('EL EMPLEADO GANA LA MEDIA DE SUS COMPAÑEROS');
    END IF;
   EXCEPTION
    WHEN NO_DATA_FOUND THEN
     DBMS_OUTPUT.PUT_LINE('Ese empleado no esta en la tabla');
    WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20000, 'Error en aplicación');
END;


    --- Tablas de multiplicar (FOR) ---
	
DECLARE
    NUMERO NUMBER(1);
BEGIN
    NUMERO:=&DAME_UN_NUMERO;
    FOR I IN 0..9 LOOP
      DBMS_OUTPUT.PUT_LINE(NUMERO||'X'||I||'='||NUMERO*I);
    END LOOP;
   EXCEPTION
    WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20000, 'Error en aplicación');
END;


	--- Tablas de multiplicar (WHILE) ---


DECLARE
    NUMERO NUMBER(1);
    I NUMBER(1) DEFAULT 0;
BEGIN
    NUMERO:=&DAME_UN_NUMERO;
     WHILE (I<=9) LOOP
      DBMS_OUTPUT.PUT_LINE(NUMERO||'X'||I||'='||NUMERO*I);
      I:=I+1;
	END LOOP
   EXCEPTION
    WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20000, 'Error en aplicación');
END;


	--- Tablas de multiplicar (LOOP) ---

DECLARE
    NUMERO NUMBER(1);
    I NUMBER(1) DEFAULT 0;
BEGIN
    NUMERO:=&DAME_UN_NUMERO;
	LOOP
      DBMS_OUTPUT.PUT_LINE(NUMERO||'X'||I||'='||NUMERO*I);
      EXIT WHEN (I=9);
	  I:=I+1;
	END LOOP
   EXCEPTION
    WHEN OTHERS THEN
    NULL;
END;


	--- Seleccionar a un empleado de la tabla emple ---

DECLARE 
	APE EMPLE.APELLIDO%TYPE;
	SAL EMPLE.SALARIO%TYPE;
BEGIN
	 SELECT APELLIDO,SALARIO INTO APE,SAL FROM EMPLE WHERE EMP_NO=7369;
      DBMS_OUTPUT.PUT_LINE(APE||'-'||SAL);
EXCEPTION
    WHEN TOO_MANY_ROWS THEN
          DBMS_OUTPUT.PUT_LINE('EL COMANDO ARROJA VARIAS FILAS');
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('EL COMANDO NO CONTIENE FILAS');
    NULL;
END;


	--- Funcion suma ---

CREATE OR REPLACE FUNCTION SUMA(N1 NUMBER,N2 NUMBER) RETURN NUMBER
IS
    RESULTADO NUMBER(9,2);
BEGIN
    RESULTADO:=N1+N2;
    RETURN RESULTADO;
EXCEPTION
END;


	--- Procedimiento suma ---
CREATE OR REPLACE PROCEDURE PSUMA(N1 NUMBER,N2 NUMBER)
    IS
      RESULTADO NUMBER(9,2);
    BEGIN
      RESULTADO:=N1+N2;
      DBMS_OUTPUT.PUT_LINE(TO_CHAR(RESULTADO,'999999999D99')); 
    END;


	--- Lanzar Procedimiento Suma ---

BEGIN
 PSUMA(4,1.2);
END;


	--- Seleccionar linea en una variable y luego mostrar un campo ---
	
DECLARE
F EMPLE%ROWTYPE;
BEGIN
  SELECT * INTO F FROM EMPLE WHERE EMP_NO=7369;
  DBMS_OUTPUT.PUT_LINE(F.APELLIDO);
END;


	--- Ejemplo programa comprobar numero ---

DECLARE
N NUMBER;
BEGIN
   N:=&NUMERO;
   CASE N
   WHEN 0 THEN
   DBMS_OUTPUT.PUT_LINE('CERO');
   WHEN 1 THEN
   DBMS_OUTPUT.PUT_LINE('UNO');
   ELSE
   DBMS_OUTPUT.PUT_LINE('NI CERO NI UNO');
   END CASE;
END;



	--- Ejemplo LOOP ---
	
DECLARE
 N NUMBER;
BEGIN
 N:=&NUMERO;
 FOR I IN 0..9 LOOP
  DBMS_OUTPUT.PUT_LINE(N||'X'||I||'='||N*I);
 END LOOP;
END;


	--- Ejemplo LOOP REVERSE ---


DECLARE
 N NUMBER;
BEGIN
 N:=&NUMERO;
 FOR I IN REVERSE 0..9 LOOP
  DBMS_OUTPUT.PUT_LINE(N||'X'||I||'='||N*I);
 END LOOP;
END;



	--- Ejemplo USO DE PSUMA CON VARIABLES ---

DECLARE
 P1 NUMBER;
 P2 NUMBER;
BEGIN
 P1:=5;
 P2:=7;
 PSUMA(P1,P2);
END;



	--- FUNCIÓN INVERSIÓN DE CARÁCTERES ---
	
CREATE OR REPLACE FUNCTION CADENA_REVES (CADENA IN VARCHAR2)
RETURN VARCHAR2
IS
 NUEVA_CADENA VARCHAR2(255):='';
BEGIN
 FOR I IN REVERSE 1..LENGTH(CADENA) LOOP
  NUEVA_CADENA:=NUEVA_CADENA||SUBSTR(CADENA,I,1);
 END LOOP;
 RETURN NUEVA_CADENA;
END;

#LA LLAMAMOS CON:

SELECT CADENA_REVES('HOLA') FROM DUAL;

				O
				
DECLARE
 C VARCHAR2(255);
BEGIN
 C:=CADENA_REVES('PERRO');
 DBMS_OUTPUT.PUT_LINE(C);
END;

				O

BEGIN
 DBMS_OUTPUT.PUT_LINE(CADENA_REVES('GATO'));
END;

	--- Numero Primo ---

CREATE OR REPLACE FUNCTION PRIMO (N POSITIVE)
RETURN BOOLEAN
AS
  DIVISOR POSITIVE DEFAULT 2;
  P BOOLEAN DEFAULT TRUE;
BEGIN
  WHILE (MOD(N,DIVISOR)<>0 AND DIVISOR<N)LOOP
   IF MOD(N,DIVISOR)=0 
    THEN 
      P:=FALSE;
    ELSE
      DIVISOR:=DIVISOR+1;
    END IF;
  END LOOP;
END;
 
 Se llama asi
      
	 \/
	 \/
	  
BEGIN
  IF PRIMO(6) THEN
    DBMS_OUTPUT.PUT_LINE('PRIMO');
  ELSE
        DBMS_OUTPUT.PUT_LINE('NO PRIMO');
  END IF;
END;

	---	Fecha ---

CREATE OR REPLACE PROCEDURE DATOS_FECHA (D DATE)
AS
BEGIN
 DBMS_OUTPUT.PUT_LINE('DIA: '||TO_CHAR(D,'DAY DD'));
 DBMS_OUTPUT.PUT_LINE('MES: '||TO_CHAR(D,'MONTH'));
 DBMS_OUTPUT.PUT_LINE('AÑO: '||TO_CHAR(D,'YYYY'));
END;

 Se llama asi
      
	 \/
	 \/

EXECUTE DATOS_FECHA(SYSDATE)


	--- Años entre dos fechas ---

CREATE OR REPLACE FUNCTION ANNOS_COMPLETOS(F1 DATE,F2 DATE)
  RETURN POSITIVE
	AS
	BEGIN
	 RETURN TRUNC(MONTHS_BETWEEN(F1,F2)/12);
	END;

 Se llama asi
      
	 \/
	 \/

SELECT ANNOS_COMPLETOS (SYSDATE,'01-01-2002') FROM DUAL


	--- Borrar empleados ---

CREATE OR REPLACE PROCEDURE BORRAR_EMPLEADO(CE EMPLE.EMP_NO%TYPE)
AS
 BEGIN
	DELETE FROM EMPLE WHERE EMP_NO=CE;
 END;


	--- Borrar empleados V2 ---

CREATE OR REPLACE PROCEDURE BORRAR_EMPLEADO(CE EMPLE.EMP_NO%TYPE)
AS
 APE EMPLE.APELLIDO%TYPE;
BEGIN
  SELECT APELLIDO INTO APE FROM EMPLE WHERE EMP_NO=CE;
  DELETE FROM EMPLE WHERE EMP_NO=CE;
  DBMS_OUTPUT.PUT_LINE('EMPLEADO BORRADO');
EXCEPTION
  WHEN NO_DATA_FOUND THEN
  DBMS_OUTPUT.PUT_LINE('NO SE HA ENCONTRADO EL EMPLEADO');
END;

	--- Subir salario ---


CREATE OR REPLACE PROCEDURE SUBIR_SALARIO(CE EMPLE.EMP_NO%TYPE)
AS
 APE EMPLE.APELLIDO%TYPE;
 NEC POSITIVE;
 SUBIDA EMPLE.SALARIO%TYPE DEFAULT 0;
 OFI EMPLE.OFICIO%TYPE;
BEGIN
  SELECT COUNT(*) INTO NEC FROM EMPLE WHERE DIR=CE;
  CASE NEC
    WHEN 0 THEN 
     SUBIDA:=SUBIDA+50;
    WHEN 1 THEN
     SUBIDA:=SUBIDA+80;
    WHEN 2 THEN
     SUBIDA:=SUBIDA+100;
    ELSE
     SUBIDA:=SUBIDA+110;
  END CASE;
  SELECT OFICIO INTO OFI FROM EMPLE WHERE EMP_NO=CE;
  IF OFI='PRESIDENTE' THEN 
   SUBIDA:=SUBIDA+30;
  END IF;
  UPDATE EMPLE SET SALARIO=SALARIO+SUBIDA WHERE EMP_NO=CE;
  COMMIT;
  DBMS_OUTPUT.PUT_LINE('SE HA SUBIDO EL SALARIO AL EMPLEADO '||APE||'EN '||SUBIDA||'EUROS');
EXCEPTION
  WHEN NO_DATA_FOUND THEN
  DBMS_OUTPUT.PUT_LINE('EL EMPLEADO NO SE ENCUENTRA');
END;


	--- Primer apellido ---


CREATE OR REPLACE FUNCTION PRIMER_APELLIDO(CADENA VARCHAR2)
RETURN VARCHAR2
AS
 PA VARCHAR2(255) DEFAULT '';
 LETRA VARCHAR2(1);
 POS NUMBER(3) DEFAULT '1';
BEGIN
 LETRA:=SUBSTR(CADENA,POS,1);
 WHILE (LETRA BETWEEN  'A' AND 'Z') AND POS<=LENGTH(CADENA) LOOP
  PA:=PA||LETRA;
  POS:=POS+1;
  LETRA:=SUBSTR(CADENA,POS,1);
 END LOOP;
 RETURN PA;
END;


	--- Primer apellido (Incluye Ñ) ---


CREATE OR REPLACE FUNCTION PRIMER_APELLIDO(CADENA VARCHAR2)
RETURN VARCHAR2
AS
 PA VARCHAR2(255) DEFAULT '';
 LETRA VARCHAR2(1);
 POS NUMBER(3) DEFAULT '1';
BEGIN
 LETRA:=SUBSTR(CADENA,POS,1);
 WHILE ((LETRA BETWEEN  'A' AND 'Z') OR LETRA='Ñ') AND POS<=LENGTH(CADENA) LOOP
  PA:=PA||LETRA;
  POS:=POS+1;
  LETRA:=SUBSTR(CADENA,POS,1);
 END LOOP;
 RETURN PA;
END;


	--- Cadena del revés ---

CREATE OR REPLACE FUNCTION CADENA_REVES(CADENA VARCHAR2)
RETURN VARCHAR2
AS
 CR VARCHAR2(255) DEFAULT '';
BEGIN
 FOR I IN REVERSE 1..LENGTH(CADENA) LOOP
 CR:=CR||SUBSTR(CADENA,I,1);
 END LOOP;
 RETURN CR;
END;


	--- Comprobar palabra palindroma (Se lee igual al reves) ---


CREATE OR REPLACE PROCEDURE PALINDROMA(CADENA VARCHAR2)
AS
BEGIN
 IF CADENA=CADENA_REVES(CADENA) THEN
  DBMS_OUTPUT.PUT_LINE('PALINDROMA');
 ELSE
  DBMS_OUTPUT.PUT_LINE('NO PALINDROMA');
 END IF;
END;


	--- Quitar espacios en blanco ---


CREATE OR REPLACE FUNCTION QUITA_BLANCOS(CADENA VARCHAR2)
RETURN VARCHAR2
AS
 NUEVA_CADENA VARCHAR2(255) DEFAULT '';
BEGIN
 FOR I IN 1..LENGTH(CADENA) LOOP
  IF SUBSTR(CADENA,I,1)<>' ' THEN
   NUEVA_CADENA:=NUEVA_CADENA||SUBSTR(CADENA,I,1);
  END IF;
 END LOOP;
 RETURN NUEVA_CADENA;
END;


	--- Frase palindroma ---


CREATE OR REPLACE PROCEDURE FRASE_PALINDROMA(CADENA VARCHAR2)
AS
BEGIN
 IF QUITA_BLANCOS(CADENA)=CADENA_REVES(QUITA_BLANCOS(CADENA)) THEN
  DBMS_OUTPUT.PUT_LINE('FRASE PALINDROMA');
 ELSE
    DBMS_OUTPUT.PUT_LINE('FRASE NO PALINDROMA');
 END IF;
END;


	--- Cambiar oficio a un empleado ---


CREATE OR REPLACE PROCEDURE CAMBIAR_OFICIO_EMPLEADO (CE EMPLE.EMP_NO%TYPE, CADENA VARCHAR2)
AS
 OFI EMPLE.OFICIO%TYPE;
BEGIN
 SELECT OFICIO INTO OFI FROM EMPLE WHERE EMP_NO=CE;
 UPDATE EMPLE SET OFICIO=CADENA WHERE EMP_NO=CE;
 COMMIT;
 DBMS_OUTPUT.PUT_LINE('SE HA CAMBIADO EL OFICIO AL EMPLEADO '||CE||' DE  '||OFI||' A '||CADENA);
EXCEPTION
 WHEN NO_DATA_FOUND THEN
 DBMS_OUTPUT.PUT_LINE('NO SE ENCUENTRA EL EMPLEADO');
END;


	--- Actualizar el salario de un empleado (Sin cursor) ---


CREATE OR REPLACE PROCEDURE SUBIR_SALARIO_EMPLEADOS(
CD EMPLE.DEPT_NO%TYPE,
PCT NUMBER)
AS
BEGIN
 UPDATE EMPLE SET SALARIO=SALARIO+ (SALARIO*PCT/100) WHERE DEPT_NO=CD; 
END;


	--- Actualizar el salario de un empleado (Con cursor) ---
	

CREATE OR REPLACE PROCEDURE SUBIR_SALARIO_EMPLEADOS(
CD EMPLE.DEPT_NO%TYPE,
PCT NUMBER)
AS
 CURSOR C IS SELECT SALARIO FROM EMPLE WHERE DEPT_NO=CD 
 FOR UPDATE;
BEGIN
 FOR FILA IN C LOOP
   UPDATE EMPLE SET SALARIO=SALARIO+ (SALARIO*PCT/100) WHERE CURRENT OF C;
 END LOOP;
END;

#Ejecutar con:
EXECUTE SUBIR_SALARIO_EMPLEADOS(10,5)


	--- Actualizar el salario de un empleado (Con cursor) II ---

CREATE OR REPLACE PROCEDURE SUBIR_SALARIO_EMPLEADOS(
CD EMPLE.DEPT_NO%TYPE,
PCT NUMBER)
AS
 CURSOR C IS SELECT SALARIO FROM EMPLE WHERE DEPT_NO=CD 
 FOR UPDATE;
 SUBIDA NUMBER(6,2);
BEGIN
 FOR FILA IN C LOOP
 SUBIDA:=FILA.SALARIO*PCT/100;
 IF SUBIDA>100 THEN 
  SUBIDA:=100;
  END IF;
   UPDATE EMPLE SET SALARIO=SALARIO+SUBIDA WHERE CURRENT OF C;
   COMMIT;
 END LOOP;
END;

#Ejecutar con:
EXECUTE SUBIR_SALARIO_EMPLEADOS(10,5)


	--- Apellidos y fecha ordenados por apellido ---


CREATE OR REPLACE PROCEDURE EMPLEADOS_APELLIDO_Y_FECHA
AS
CURSOR CEMPLE IS
SELECT APELLIDO, FECHA_ALT
FROM EMPLE
ORDER BY APELLIDO;
CAPELLIDO VARCHAR2(10);
CFECHA DATE;
BEGIN
OPEN CEMPLE;
FETCH CEMPLE into CAPELLIDO, CFECHA;
WHILE CEMPLE%FOUND LOOP
DBMS_OUTPUT.PUT_LINE( CAPELLIDO||'*'||CFECHA);
FETCH CEMPLE into CAPELLIDO,CFECHA;
END LOOP;
CLOSE CEMPLE;
END;


	
	--- Mostrar el departamento y su numero de empleados ---


CREATE OR REPLACE PROCEDURE MOSTRAR_DEP_Y_EMPLEADOS
AS
 CURSOR C IS SELECT DNOMBRE,COUNT(EMP_NO) AS N_EMP
 FROM EMPLE E RIGHT JOIN DEPART D ON E.DEPT_NO=D.DEPT_NO
 GROUP BY DNOMBRE;
BEGIN
 FOR FILA IN C LOOP
   DBMS_OUTPUT.PUT_LINE(FILA.DNOMBRE||'*'||TO_CHAR(FILA.N_EMP));
 END LOOP;
END;


	--- Ver empleados de cada departamento ---


CREATE OR REPLACE PROCEDURE VER_EMPLEADOS_DPTO(CD EMPLE.DEPT_NO%TYPE)
AS
 CURSOR C IS SELECT APELLIDO,OFICIO,SALARIO FROM EMPLE WHERE DEPT_NO=CD;
BEGIN
 FOR FILA IN C LOOP
   DBMS_OUTPUT.PUT_LINE(FILA.APELLIDO||'*'||FILA.OFICIO||'*'||FILA.SALARIO);
 END LOOP;
END;


	--- Incrementar salario a empleados (Sin cursor) ---


CREATE OR REPLACE PROCEDURE INCREMENTAR_SALARIO_EMPLEADOS(
DPTO EMPLE.DEPT_NO%TYPE,
QTY NUMBER)
AS
BEGIN
  UPDATE EMPLE SET SALARIO=SALARIO+QTY WHERE DEPT_NO=DPTO;
  DBMS_OUTPUT.PUT_LINE(SQL%ROWCOUNT);
END;


	--- Incrementar salario a empleados (Con cursor y for loop) ---


CREATE OR REPLACE PROCEDURE INCREMENTAR_SALARIO_EMPLEADOS(
DPTO EMPLE.DEPT_NO%TYPE,
QTY NUMBER)
AS
 CURSOR C IS SELECT SALARIO, ROWID FROM EMPLE WHERE DEPT_NO=DPTO;
 NFILAS NUMBER := 0;
BEGIN
  FOR FILA IN C LOOP
   UPDATE EMPLE SET SALARIO=SALARIO+QTY WHERE ROWID = FILA.ROWID;
   NFILAS := NFILAS+1;
  END LOOP;
  DBMS_OUTPUT.PUT_LINE(NFILAS);
END;


	--- Incrementar salario a empleados (Con cursor) ---


CREATE OR REPLACE PROCEDURE INCREMENTAR_SALARIO_EMPLEADOS(
DPTO EMPLE.DEPT_NO%TYPE,
QTY NUMBER)
AS
 CURSOR C IS SELECT EMP_NO,SALARIO FROM EMPLE WHERE DEPT_NO=DPTO;
 FILA C%ROWTYPE;
BEGIN
  OPEN C;
  LOOP
    FETCH C INTO FILA;
   EXIT WHEN C%NOTFOUND;
    UPDATE EMPLE SET SALARIO=SALARIO+QTY WHERE EMP_NO=FILA.EMP_NO;
  END LOOP;
    DBMS_OUTPUT.PUT_LINE(C%ROWCOUNT);
  CLOSE C;
END;


	--- Mostrar el apellido y el salario de los 5 empleados con el salario mas alto (Cursor) ---


CREATE OR REPLACE PROCEDURE APELLIDO_SALARIO_5_EMPLEADOS
AS
    CURSOR C IS
    SELECT APELLIDO,SALARIO FROM EMPLE
    ORDER BY SALARIO DESC;
    FILA C%ROWTYPE;
    i NUMBER;
BEGIN
    i:=1;
 OPEN C;
    FETCH C INTO FILA;
    WHILE C%FOUND AND i<=5 LOOP
     DBMS_OUTPUT.PUT_LINE(FILA.APELLIDO ||' * '|| FILA.SALARIO);
     FETCH C INTO FILA;
     i:=I+1;
    END LOOP;
 CLOSE C;
END;


	--- Mostrar el apellido y el salario de los 5 empleados con el salario mas alto II (Cursor)  ---


CREATE OR REPLACE PROCEDURE APELLIDO_SALARIO_5_EMPLEADOS
AS
    CURSOR C IS
    SELECT APELLIDO,SALARIO FROM EMPLE
    ORDER BY SALARIO DESC;
    FILA C%ROWTYPE;
    i NUMBER;
BEGIN
    i:=1;
 OPEN C;
   LOOP
    FETCH C INTO FILA;
    EXIT WHEN C%NOTFOUND OR C%ROWCOUNT=6;
     DBMS_OUTPUT.PUT_LINE(FILA.APELLIDO ||' * '|| FILA.SALARIO);
     FETCH C INTO FILA;
     i:=I+1;
    END LOOP;
 CLOSE C;
END;


	--- Aviso al Insertar, Actualizar o Eliminar (Disparador) ---


CREATE OR REPLACE TRIGGER EJEMPLO
AFTER INSERT OR UPDATE OR DELETE ON EMPLE
FOR EACH ROW
DECLARE
 SAL_MEDIO NUMBER(8,2);
BEGIN
 IF INSERTING THEN
  DBMS_OUTPUT.PUT_LINE('SE HA INSERTADO UNA FILA');
 ELSIF DELETING THEN
  DBMS_OUTPUT.PUT_LINE('SE HA BORRADO UNA FILA');
 ELSE
  DBMS_OUTPUT.PUT_LINE('SE HA ACTUALIZADO UNA FILA');
 END IF;
END;


	--- Iguala el salario a la media si este es superior (Disparador) ---


CREATE OR REPLACE TRIGGER CONTROL_SALARIO_INSERCCION
BEFORE INSERT ON EMPLE
FOR EACH ROW
DECLARE
 SAL_MEDIO NUMBER(8,2);
BEGIN
 SELECT AVG(SALARIO) INTO SAL_MEDIO FROM EMPLE WHERE DEPT_NO=:NEW.DEPT_NO;
 IF :NEW.SALARIO>SAL_MEDIO THEN
 :NEW.SALARIO:=SAL_MEDIO;
 END IF;
END;


	--- Creacion de tablas T_Art y T_Ped ---
	

CREATE TABLE T_ART(
  CODART VARCHAR2(4) PRIMARY KEY,
  NOMBRE VARCHAR2(35) NOT NULL,
  PRECIO NUMBER(8,2) NOT NULL,
  STOCK NUMBER(8) NOT NULL,
  STOCK_MINIMO NUMBER(8) NOT NULL,
  STOCK_MAXIMO NUMBER(8) NOT NULL
)

CREATE TABLE T_PED(
  CODART VARCHAR2(4) REFERENCES T_ART(CODART) ON DELETE CASCADE,
  UNIDADES NUMBER(8) NOT NULL,
  FECHA DATE,
  PRIMARY KEY (CODART,FECHA)
)


	--- Anotar pedido articulo "Crea un pedido cuando el stock de articulos esta por debajo del minimo" (Disparador) ---


CREATE OR REPLACE TRIGGER ANOTAR_PEDIDO_ARTICULO
AFTER UPDATE OF STOCK ON T_ART
 FOR EACH ROW
DECLARE
 UNIDADES NUMBER(8);
BEGIN
 IF :NEW.STOCK<:NEW.STOCK_MINIMO THEN
  UNIDADES:=:NEW.STOCK_MAXIMO-:NEW.STOCK;
  INSERT INTO T_PED VALUES (:NEW.CODART,UNIDADES,SYSDATE);
 END IF;
END;


	--- Ejercicio 22 ---


CREATE OR REPLACE PROCEDURE EJERCICIO22
AS
 CURSOR C IS SELECT OFICIO,SALARIO,ROWID FROM EMPLE;
 SAL_MEDIO NUMBER(8,2);
BEGIN
 FOR FILA IN C LOOP
   SELECT AVG(SALARIO) INTO SAL_MEDIO FROM EMPLE WHERE OFICIO=FILA.OFICIO;
   IF FILA.SALARIO<SAL_MEDIO THEN
    UPDATE EMPLE SET SALARIO=SALARIO+(SAL_MEDIO-FILA.SALARIO)/2 WHERE ROWID=FILA.ROWID;
   END IF;
  END LOOP;
  COMMIT;
END;


	--- Ejercicio 1 ---


CREATE OR REPLACE PROCEDURE EJERCICIO_1 (
 CP PRODUCTOS.CODIGOPRODUCTO%TYPE,
 DESC VARCHAR2)
AS
 G PRODUCTOS.GAMA%TYPE;
BEGIN
 SELECT GAMA INTO G FROM PRODUCTOS WHERE CODIGOPRODUCTO=CP;
 SELECT GAMA INTO NG FROM GAMASPRODUCTOS WHERE DESCRIPCIONTEXTO=DES;
 UPDATE PRODUCTOS SET GAMA=NG WHERE CODIGOPRODUCTO=CP;
EXCEPTION
 WHEN NO_DATA_FOUND THEN
 DBMS_OUTPUT.PUT_LINE('NO ENCONTRADO');
END;
 

	--- Ejercicio 2 ---
	
CREATE OR REPLACE PROCEDURE EJERCICIO_2 
AS
 MEDIA_PUNTOS NUMBER(5,2);
 MEDIA_REBOTES NUMBER(5,2);
 MEDIA_ASISTENCIAS NUMBER(5,2);
 TOTAL_PUNTOS NUMBER(5,2);
 COMANDO VARCHAR2(255);
 CURSOR C IS SELECT CODIGO,ROWID FROM JUGADORES;
PROCEDURE AGREGAR_COLUMNA
AS
BEGIN
 COMANDO:='ALTER TABLE JUGADORES ADD VALORACION INTEGER';
END; 
BEGIN
 AGREGAR_COLUMNA;
 FOR FILA IN C LOOP
  SELECT AVG(PUNTOS_POR_PARTIDO),AVG(REBOTES_POR_PARTIDO),AVG(ASISTENCIAS_POR_PARTIDO) INTO MEDIA_PUNTOS,MEDIA_REBOTES,MEDIA_ASISTENCIAS FROM ESTADISTICAS WHERE JUGADOR=FILA.CODIGO;
  TOTAL_PUNTOS:=TRUNC(MEDIA_PUNTOS+MEDIA_REBOTES+MEDIA_ASISTENCIAS,0);
  UPDATE JUGADORES SET VALORACION=TOTAL_PUNTOS WHERE ROWID=FILA.ROWID;
 END LOOP;
  COMMIT;
END;


	--- Ejercicio 4 ---

CREATE OR REPLACE PROCEDURE ASIGNAR_NUMERO_OPOSITOR (LETRA VARCHAR2)
AS
 NUMERO POSITIVE DEFAULT 1;
 CURSOR C1 IS SELECT ROWID FROM OPOSITORES WHERE NOMBRE>=LETRA ORDER BY NOMBRE;
 CURSOR C2 IS SELECT ROWID FROM OPOSITORES WHERE NOMBRE<LETRA ORDER BY NOMBRE;
BEGIN
 
 FOR FILA IN C1 LOOP
  UPDATE OPOSITORES SET N_OPOSITOR=NUMERO WHERE ROWID=FILA.ROWID;
  NUMERO:=NUMERO+1;
 END LOOP;
 
 FOR FILA IN C2 LOOP
  UPDATE OPOSITORES SET N_OPOSITOR=NUMERO WHERE ROWID=FILA.ROWID;
  NUMERO:=NUMERO+1;
 END LOOP;
END;

EXECUTE ASIGNAR_NUMERO_OPOSITOR('B')

SELECT * FROM OPOSITORES ORDER BY NOMBRE


	--- Ejercicio 7 ---

CREATE OR REPLACE PROCEDURE INFORME_PEDIDO(CP PEDIDOS.CODIGOPEDIDO%TYPE)
AS
 CC CLIENTES.CODIGOCLIENTE%TYPE;
 FP PEDIDOS.FECHAPEDIDO%TYPE;
 FC CLIENTES%ROWTYPE;
 TP NUMBER(8,2) DEFAULT 0;
 CURSOR C IS SELECT * FROM DETALLEPEDIDOS NATURAL JOIN PRODUCTOS WHERE CODIGOPEDIDO=CP;
BEGIN
 SELECT CODIGOCLIENTE,FECHAPEDIDO INTO CC,FP FROM PEDIDOS WHERE CODIGOPEDIDO=CP;
 SELECT * INTO FC FROM CLIENTES WHERE CODIGOCLIENTE=CC;
 
 DBMS_OUTPUT.PUT_LINE('CODIGO PEDIDO: '||CP);
 DBMS_OUTPUT.PUT_LINE('CODIGO PEDIDO: '||FC.CODIGOCLIENTE);
 DBMS_OUTPUT.PUT_LINE('NOMBRE: '||FC.NOMBRECLIENTE);
 DBMS_OUTPUT.PUT_LINE('DIRECCION: '||FC.LINEADIRECCION1);
 DBMS_OUTPUT.PUT_LINE('-----------------------------------------------------------------');
 FOR FILA IN C LOOP
  TP:=TP+FILA.CANTIDAD*FILA.PRECIOUNIDAD;
  DBMS_OUTPUT.PUT_LINE(FILA.NUMEROLINEA||'-'||FILA.CODIGOPRODUCTO||'-'||FILA.NOMBRE
  ||'-'||FILA.CANTIDAD||'-'||FILA.PRECIOUNIDAD||'-'||FILA.CANTIDAD*FILA.PRECIOUNIDAD);
 END LOOP;
 DBMS_OUTPUT.PUT_LINE('-----------------------------------------------------------------');
 DBMS_OUTPUT.PUT_LINE('TOTAL PEDIDO: '||TP);
 DBMS_OUTPUT.PUT_LINE('IVA (21%): '||TP*0.21);
 DBMS_OUTPUT.PUT_LINE('TOTAL CON IVA: '||TP*1.21);
EXCEPTION
 WHEN NO_DATA_FOUND THEN
 DBMS_OUTPUT.PUT_LINE('EL PEDIDO NO EXISTE');
END;

EXECUTE INFORME_PEDIDO(1)


	--- Ejercicio 2 BBDD NBA ---

CREATE OR REPLACE TRIGGER ACTUALIZAR_CODIGO_JUGADOR
AFTER UPDATE OF CODIGO ON JUGADORES
FOR EACH ROW
BEGIN
 UPDATE ESTADISTICAS SET JUGADOR=:NEW.CODIGO WHERE JUGADOR=:OLD.CODIGO;
END;

SELECT * FROM JUGADORES

UPDATE JUGADORES SET CODIGO=700 WHERE CODIGO=1

SELECT * FROM ESTADISTICAS WHERE JUGADOR=1


	--- Ejercicio 3 BBDD NBA ---

CREATE OR REPLACE TRIGGER CONTROL_PESO
BEFORE INSERT OR UPDATE OF PESO ON JUGADORES
FOR EACH ROW
BEGIN
 IF :NEW.PESO<0 THEN
  :NEW.PESO:=ABS(:NEW.PESO);
 END IF;
END;

INSERT INTO JUGADORES VALUES (701,'PEPE','SPAIN','6-7','-220','C','Lakers','2')

SELECT * FROM JUGADORES WHERE CODIGO=701

DELETE FROM JUGADORES WHERE CODIGO=701

UPDATE JUGADORES SET PESO=-251 WHERE CODIGO=701


	--- Consultar puntos y seleccionar los que mas tengan ---
	
CREATE OR REPLACE PROCEDURE VADOFONE
AS
 CONTADOR INTEGER := 0;
 CURSOR C IS SELECT NUMERO,SUM(DURACION)AS PTOS FROM CONSUMOS GROUP BY NUMERO;
 CURSOR C2 IS SELECT * FROM CLIENTES C INNER JOIN NUMEROS N ON C.DNI=N.CLIENTE
 ORDER BY N.PUNTOS DESC;
 F C2%ROWTYPE;
BEGIN
 FOR FILA IN C LOOP
 UPDATE NUMEROS SET PUNTOS=FILA.PTOS WHERE NUMERO=FILA.NUMERO;
 END LOOP;
 COMMIT;
 OPEN C2;
 LOOP
  FETCH C2 INTO F;
  DBMS_OUTPUT.PUT_LINE(F.DNI||','||F.NOMBRE||'-'||F.NUMERO||'-'||F.PUNTOS);
  CONTADOR:=CONTADOR+1;
  EXIT WHEN C2%NOTFOUND OR CONTADOR>3;
 END LOOP;
 CLOSE C2;
END;

SET SERVEROUTPUT ON

EXECUTE VADOFONE


	--- Ejercicios programacion MySQL Ejercicio 6 ---


CREATE OR REPLACE PROCEDURE ACTUALIZAR_PRECIO_PRODUCTOS(
    G PRODUCTOS.GAMA%TYPE,
    PCT NUMBER,
    TOPE NUMBER)
AS
 CONTADOR INTEGER DEFAULT 0;
 SUBIDA NUMBER(8,2);
 CURSOR C IS SELECT PRECIOVENTA,ROWID FROM PRODUCTOS WHERE GAMA=G;
BEGIN
 FOR FILA IN C LOOP 
  SUBIDA:=FILA.PRECIOVENTA*PCT/100;
  IF FILA.PRECIOVENTA+SUBIDA>TOPE THEN
   SUBIDA:=TOPE-FILA.PRECIOVENTA;
  END IF;
  UPDATE PRODUCTOS SET PRECIOVENTA=PRECIOVENTA+SUBIDA WHERE ROWID=FILA.ROWID;
  CONTADOR:=CONTADOR+1;
 END LOOP;
 COMMIT;
 DBMS_OUTPUT.PUT_LINE(CONTADOR||' PRODUCTOS ACTUALIZADOS');
END;

EXECUTE ACTUALIZAR_PRECIO_PRODUCTOS('Frutales',5,50)


	--- Ejercicios programacion MySQL Ejercicio 5 ---
	

CREATE OR REPLACE PROCEDURE GRATIFICAR_SALARIO
AS
 CURSOR C IS SELECT ROWID FROM 
    (SELECT * FROM EMPLEADOS ORDER BY FECHA_ALTA) GR
    WHERE ROWNUM<26;
BEGIN
 FOR FILA IN C LOOP
  UPDATE EMPLEADOS SET SALARIO=SALARIO+300 WHERE ROWID=FILA.ROWID;
 END LOOP;
 COMMIT;
END;


	--- MasEjercicios PLSQL 1 ---


CREATE OR REPLACE PROCEDURE MASEJERCICIOSPLSQL_EJERCICIO1
AS
 CURSOR C IS SELECT DEPT_NO,SALARIO,ROWID FROM EMPLE;
 SAL_MEDIO NUMBER(8,2);
BEGIN
 FOR FILA IN C LOOP
   SELECT AVG(SALARIO) INTO SAL_MEDIO FROM EMPLE WHERE DEPT_NO=FILA.DEPT_NO;
   IF FILA.SALARIO<SAL_MEDIO THEN
    UPDATE EMPLE SET SALARIO=SAL_MEDIO WHERE ROWID=FILA.ROWID;
   END IF;
  END LOOP;
  COMMIT;
END;


	--- MasEjercicios PLSQL 2 ---


CREATE OR REPLACE PROCEDURE MASEJERCICIOSPLSQL_EJERCICIO2(PCT NUMBER)
AS
 CURSOR C IS SELECT CODIGOCLIENTE,SUM(CANTIDAD) TOTAL FROM PAGOS
 GROUP BY CODIGOCLIENTE;
BEGIN
 FOR F IN C LOOP
  IF F.TOTAL>50000 THEN
   UPDATE CLIENTES SET LIMITECREDITO=LIMITECREDITO+(LIMITECREDITO*PCT/100)
   WHERE CODIGOCLIENTE=F.CODIGOCLIENTE;
  END IF;
 END LOOP;
END;


	--- MasEjercicios PLSQL 3 ---


CREATE OR REPLACE PROCEDURE MOSTRAR_JUGADORES(CONF VARCHAR2)
AS
 CURSOR C IS SELECT * FROM JUGADORES WHERE NOMBRE_EQUIPO IN
 (SELECT NOMBRE FROM EQUIPOS WHERE CONFERENCIA=CONF);
 MEDIA_REBOTES_JUGADOR NUMBER(5,2);
 MEDIA_REBOTES_EQUIPO NUMBER(5,2);
BEGIN
 FOR F IN C LOOP
  SELECT AVG(REBOTES_POR_PARTIDO) INTO MEDIA_REBOTES_JUGADOR FROM ESTADISTICAS
  WHERE JUGADOR=F.CODIGO;
  SELECT AVG(REBOTES_POR_PARTIDO) INTO MEDIA_REBOTES_EQUIPO FROM ESTADISTICAS
  WHERE JUGADOR IN (SELECT CODIGO FROM JUGADORES WHERE NOMBRE_EQUIPO=F.NOMBRE_EQUIPO);
   IF MEDIA_REBOTES_JUGADOR>MEDIA_REBOTES_EQUIPO THEN
    DBMS_OUTPUT.PUT_LINE(F.NOMBRE);
   END IF;
 END LOOP;
END;


EXECUTE MOSTRAR_JUGADORES('East')














